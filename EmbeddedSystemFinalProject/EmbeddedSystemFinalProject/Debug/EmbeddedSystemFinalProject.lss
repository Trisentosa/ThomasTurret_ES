
EmbeddedSystemFinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000880  00000914  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000880  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800130  00800130  00000944  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000974  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f34  00000000  00000000  00000a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009dd  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000884  00000000  00000000  00002395  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00002c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000622  00000000  00000000  00002e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a7  00000000  00000000  0000344e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000038f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 43 02 	jmp	0x486	; 0x486 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e8       	ldi	r30, 0x80	; 128
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e3       	ldi	r26, 0x30	; 48
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 33       	cpi	r26, 0x3E	; 62
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6d 03 	call	0x6da	; 0x6da <main>
  9e:	0c 94 3e 04 	jmp	0x87c	; 0x87c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <reset_packet>:
volatile static uint16_t pause_time_counter = 0;

// reset current packet data
void reset_packet()
{
	rec_addr = 0;
  a6:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <rec_addr>
	rec_addr_inv = 0;
  aa:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <rec_addr_inv>
	rec_ext_addr = 0;
  ae:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <rec_ext_addr+0x1>
  b2:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <rec_ext_addr>
	rec_command = 0;
  b6:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rec_command>
	rec_command_inv = 0;
  ba:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <rec_command_inv>
	rec_repeat = 0;
  be:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <rec_repeat>
		
	read_bit_counter = 0;		
  c2:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <read_bit_counter>
  c6:	08 95       	ret

000000c8 <start_ir_timer>:
}

// Start timer in ms, if you set start_ir_timer(100);  the timer will set for 100 ms and is ended with the interruption
void start_ir_timer(uint8_t time_ms)
{
	TCCR1A=0x0;
  c8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCNT1=0x0;	
  cc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  d0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	OCR1A= TIMER_COMPARE_VALUE_ONE_MS * time_ms; 
  d4:	2a ef       	ldi	r18, 0xFA	; 250
  d6:	82 9f       	mul	r24, r18
  d8:	c0 01       	movw	r24, r0
  da:	11 24       	eor	r1, r1
  dc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  e0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1B|=(1<<WGM12); // CTC mode -> TCNT1 = OCR1A    
  e4:	e1 e8       	ldi	r30, 0x81	; 129
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	88 60       	ori	r24, 0x08	; 8
  ec:	80 83       	st	Z, r24
	TCCR1B|=(1<<CS10)|(1<<CS11); // prescaler 64
  ee:	80 81       	ld	r24, Z
  f0:	83 60       	ori	r24, 0x03	; 3
  f2:	80 83       	st	Z, r24
	TIMSK1|=(1<<OCIE1A); // allow interrupts
  f4:	ef e6       	ldi	r30, 0x6F	; 111
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	82 60       	ori	r24, 0x02	; 2
  fc:	80 83       	st	Z, r24
  fe:	08 95       	ret

00000100 <stop_ir_timer>:
}

void stop_ir_timer()
{
	TCCR1B&=~(1<<CS10);
 100:	e1 e8       	ldi	r30, 0x81	; 129
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	8e 7f       	andi	r24, 0xFE	; 254
 108:	80 83       	st	Z, r24
	TCCR1B&=~(1<<CS11);		
 10a:	80 81       	ld	r24, Z
 10c:	8d 7f       	andi	r24, 0xFD	; 253
 10e:	80 83       	st	Z, r24
	TCCR1B&=~(1<<CS12);
 110:	80 81       	ld	r24, Z
 112:	8b 7f       	andi	r24, 0xFB	; 251
 114:	80 83       	st	Z, r24
 116:	08 95       	ret

00000118 <reset_ir_receiver>:
}
// reset receiver to the initial state
void reset_ir_receiver()
{	
	stop_ir_timer();			
 118:	0e 94 80 00 	call	0x100	; 0x100 <stop_ir_timer>
	reset_packet();
 11c:	0e 94 53 00 	call	0xa6	; 0xa6 <reset_packet>
	
	receiver_state = RECEIVER_STATE_START_REPEAT;
 120:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <receiver_state>
	receiver_allow_repeat = REPEAT_COMMAND_NOT_ALLOWED;
 124:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <receiver_allow_repeat>
	
	pulse_time_counter = 0;
 128:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <pulse_time_counter+0x1>
 12c:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <pulse_time_counter>
	pause_time_counter = 0;
 130:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <__data_end+0x1>
 134:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__data_end>
 138:	08 95       	ret

0000013a <on_start_bit>:
}

void on_start_bit()
{
	// new packet is going to be received :)
	reset_packet();	
 13a:	0e 94 53 00 	call	0xa6	; 0xa6 <reset_packet>
	receiver_state = RECEIVER_STATE_READING;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <receiver_state>
 144:	08 95       	ret

00000146 <on_new_packet_received>:
}

// the packet is received successfully and ready for further processing
void on_new_packet_received()
{	
	receiver_state = RECEIVER_STATE_READY;
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <receiver_state>
	read_bit_counter = 0;
 14c:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <read_bit_counter>
	receiver_allow_repeat = REPEAT_COMMAND_ALLOWED;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <receiver_allow_repeat>
	
	start_ir_timer(MAX_DELAY_FOR_NEXT_REPEAT_COMMAND);
 156:	88 e7       	ldi	r24, 0x78	; 120
 158:	0e 94 64 00 	call	0xc8	; 0xc8 <start_ir_timer>
 15c:	08 95       	ret

0000015e <on_data_bit>:
	#endif
}
// proccess next data bit
void on_data_bit(uint8_t bit)
{	
	if ((read_bit_counter < NEC_MAX_PACKET_BIT_NUMBER) && (receiver_state == RECEIVER_STATE_READING))
 15e:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <read_bit_counter>
 162:	90 32       	cpi	r25, 0x20	; 32
 164:	08 f0       	brcs	.+2      	; 0x168 <on_data_bit+0xa>
 166:	7f c0       	rjmp	.+254    	; 0x266 <on_data_bit+0x108>
 168:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <receiver_state>
 16c:	21 30       	cpi	r18, 0x01	; 1
 16e:	09 f0       	breq	.+2      	; 0x172 <on_data_bit+0x14>
 170:	7a c0       	rjmp	.+244    	; 0x266 <on_data_bit+0x108>
	{
		if (bit)
 172:	88 23       	and	r24, r24
 174:	09 f4       	brne	.+2      	; 0x178 <on_data_bit+0x1a>
 176:	4c c0       	rjmp	.+152    	; 0x210 <on_data_bit+0xb2>
		{			
			if (read_bit_counter < 8) 
 178:	98 30       	cpi	r25, 0x08	; 8
 17a:	70 f4       	brcc	.+28     	; 0x198 <on_data_bit+0x3a>
			{
				// address reading
				rec_addr |= (1<<read_bit_counter);
 17c:	21 e0       	ldi	r18, 0x01	; 1
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	09 2e       	mov	r0, r25
 182:	02 c0       	rjmp	.+4      	; 0x188 <on_data_bit+0x2a>
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	0a 94       	dec	r0
 18a:	e2 f7       	brpl	.-8      	; 0x184 <on_data_bit+0x26>
 18c:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <rec_addr>
 190:	28 2b       	or	r18, r24
 192:	20 93 3b 01 	sts	0x013B, r18	; 0x80013b <rec_addr>
 196:	3c c0       	rjmp	.+120    	; 0x210 <on_data_bit+0xb2>
			} else if (read_bit_counter >=8 && read_bit_counter < 16) 
 198:	88 ef       	ldi	r24, 0xF8	; 248
 19a:	89 0f       	add	r24, r25
 19c:	88 30       	cpi	r24, 0x08	; 8
 19e:	88 f4       	brcc	.+34     	; 0x1c2 <on_data_bit+0x64>
			{
				// inverting address reading
				rec_addr_inv |= (1<<(read_bit_counter - 8));
 1a0:	49 2f       	mov	r20, r25
 1a2:	50 e0       	ldi	r21, 0x00	; 0
 1a4:	48 50       	subi	r20, 0x08	; 8
 1a6:	51 09       	sbc	r21, r1
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <on_data_bit+0x54>
 1ae:	22 0f       	add	r18, r18
 1b0:	33 1f       	adc	r19, r19
 1b2:	4a 95       	dec	r20
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <on_data_bit+0x50>
 1b6:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <rec_addr_inv>
 1ba:	28 2b       	or	r18, r24
 1bc:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <rec_addr_inv>
 1c0:	27 c0       	rjmp	.+78     	; 0x210 <on_data_bit+0xb2>
			} else if (read_bit_counter >= 16 && read_bit_counter < 24) 
 1c2:	80 ef       	ldi	r24, 0xF0	; 240
 1c4:	89 0f       	add	r24, r25
 1c6:	88 30       	cpi	r24, 0x08	; 8
 1c8:	88 f4       	brcc	.+34     	; 0x1ec <on_data_bit+0x8e>
			{
				// command reading
				rec_command |= (1<<(read_bit_counter - 16));
 1ca:	49 2f       	mov	r20, r25
 1cc:	50 e0       	ldi	r21, 0x00	; 0
 1ce:	40 51       	subi	r20, 0x10	; 16
 1d0:	51 09       	sbc	r21, r1
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <on_data_bit+0x7e>
 1d8:	22 0f       	add	r18, r18
 1da:	33 1f       	adc	r19, r19
 1dc:	4a 95       	dec	r20
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <on_data_bit+0x7a>
 1e0:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rec_command>
 1e4:	28 2b       	or	r18, r24
 1e6:	20 93 39 01 	sts	0x0139, r18	; 0x800139 <rec_command>
 1ea:	12 c0       	rjmp	.+36     	; 0x210 <on_data_bit+0xb2>
			} else if (read_bit_counter >= 24) 
 1ec:	98 31       	cpi	r25, 0x18	; 24
 1ee:	80 f0       	brcs	.+32     	; 0x210 <on_data_bit+0xb2>
			{
				// inverting command reading
				rec_command_inv |= (1<<(read_bit_counter - 24));
 1f0:	49 2f       	mov	r20, r25
 1f2:	50 e0       	ldi	r21, 0x00	; 0
 1f4:	48 51       	subi	r20, 0x18	; 24
 1f6:	51 09       	sbc	r21, r1
 1f8:	21 e0       	ldi	r18, 0x01	; 1
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <on_data_bit+0xa4>
 1fe:	22 0f       	add	r18, r18
 200:	33 1f       	adc	r19, r19
 202:	4a 95       	dec	r20
 204:	e2 f7       	brpl	.-8      	; 0x1fe <on_data_bit+0xa0>
 206:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <rec_command_inv>
 20a:	28 2b       	or	r18, r24
 20c:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <rec_command_inv>
			}
		}				
		
		read_bit_counter++;
 210:	9f 5f       	subi	r25, 0xFF	; 255
 212:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <read_bit_counter>
		
		if (read_bit_counter == NEC_MAX_PACKET_BIT_NUMBER) 
 216:	90 32       	cpi	r25, 0x20	; 32
 218:	31 f5       	brne	.+76     	; 0x266 <on_data_bit+0x108>
		{				
			// all bits are read, now check the packet on errors
			// // command consist of 2 bytes, the second one is inverted value of first byte
			if ((rec_command + rec_command_inv) == 0xFF)
 21a:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <rec_command>
 21e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <rec_command_inv>
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	82 0f       	add	r24, r18
 226:	91 1d       	adc	r25, r1
 228:	8f 3f       	cpi	r24, 0xFF	; 255
 22a:	91 05       	cpc	r25, r1
 22c:	d1 f4       	brne	.+52     	; 0x262 <on_data_bit+0x104>
			{
				// ok , command is fine, now check address
				int8_t invereted_address_pair = ((rec_addr + rec_addr_inv) == 0xFF);							
 22e:	40 91 3b 01 	lds	r20, 0x013B	; 0x80013b <rec_addr>
 232:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <rec_addr_inv>
 236:	28 2f       	mov	r18, r24
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	24 0f       	add	r18, r20
 23c:	31 1d       	adc	r19, r1
				// extended nec protocal is allowed, so address will may 2 bytes as the address, but not allowed addressed from not extended protocol : non-inverted + inverted
				if (!invereted_address_pair)
 23e:	2f 3f       	cpi	r18, 0xFF	; 255
 240:	31 05       	cpc	r19, r1
 242:	61 f0       	breq	.+24     	; 0x25c <on_data_bit+0xfe>
				{
					// the protocol is NEC extended
					// the device address is 16 bit
					rec_ext_addr=(uint16_t) rec_addr_inv<<8; //high byte
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	98 2f       	mov	r25, r24
 248:	88 27       	eor	r24, r24
					rec_ext_addr|=rec_addr; // low byte
 24a:	84 2b       	or	r24, r20
 24c:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <rec_ext_addr+0x1>
 250:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <rec_ext_addr>
					rec_addr = 0;
 254:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <rec_addr>
					rec_addr_inv = 0;
 258:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <rec_addr_inv>
				} 
																
				// new valid packet is received
				on_new_packet_received();
 25c:	0e 94 a3 00 	call	0x146	; 0x146 <on_new_packet_received>
 260:	08 95       	ret
			} 
			else
			{
				// 2 bytes of command are incorrect, because they are not inverted to each other
				reset_ir_receiver(); // reset
 262:	0e 94 8c 00 	call	0x118	; 0x118 <reset_ir_receiver>
 266:	08 95       	ret

00000268 <on_repeat_command>:
}

// process repeat command, it happens when a button is pressed for a longer period of time, this command is iterative
void on_repeat_command()
{
	if (receiver_allow_repeat == REPEAT_COMMAND_ALLOWED && (receiver_state == RECEIVER_STATE_READY || receiver_state == RECEIVER_STATE_START_REPEAT))
 268:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <receiver_allow_repeat>
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	a1 f4       	brne	.+40     	; 0x298 <on_repeat_command+0x30>
 270:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <receiver_state>
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	11 f0       	breq	.+4      	; 0x27c <on_repeat_command+0x14>
 278:	81 11       	cpse	r24, r1
 27a:	0e c0       	rjmp	.+28     	; 0x298 <on_repeat_command+0x30>
	{
		if (rec_repeat < REPEAT_COMMAND_MAX_QTY)
 27c:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <rec_repeat>
 280:	8f 3f       	cpi	r24, 0xFF	; 255
 282:	19 f0       	breq	.+6      	; 0x28a <on_repeat_command+0x22>
		{			
			rec_repeat++; // repeat counter up, repeat command maybe send it sequence
 284:	8f 5f       	subi	r24, 0xFF	; 255
 286:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <rec_repeat>
		}
		receiver_state = RECEIVER_STATE_READY;
 28a:	82 e0       	ldi	r24, 0x02	; 2
 28c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <receiver_state>
		
		start_ir_timer(MAX_DELAY_FOR_NEXT_REPEAT_COMMAND); // wait next repeat command
 290:	88 e7       	ldi	r24, 0x78	; 120
 292:	0e 94 64 00 	call	0xc8	; 0xc8 <start_ir_timer>
 296:	08 95       	ret
	} 
	else 
	{
		//  problem, invalid protocol, reset receiver
		reset_ir_receiver();
 298:	0e 94 8c 00 	call	0x118	; 0x118 <reset_ir_receiver>
 29c:	08 95       	ret

0000029e <read_chunk>:
}

// recognize received chunk
void read_chunk()
{
	if (pulse_time_counter > 0 && pause_time_counter > 0)
 29e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <pulse_time_counter>
 2a2:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <pulse_time_counter+0x1>
 2a6:	89 2b       	or	r24, r25
 2a8:	09 f4       	brne	.+2      	; 0x2ac <read_chunk+0xe>
 2aa:	c2 c0       	rjmp	.+388    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 2ac:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 2b0:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
 2b4:	89 2b       	or	r24, r25
 2b6:	09 f4       	brne	.+2      	; 0x2ba <read_chunk+0x1c>
 2b8:	bb c0       	rjmp	.+374    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
	{
		// pulse 7 ms (1750) - 11 ms (2750) 		
		if (pulse_time_counter > (7 * TIMER_COMPARE_VALUE_ONE_MS) && pulse_time_counter < (11 * TIMER_COMPARE_VALUE_ONE_MS)) 
 2ba:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <pulse_time_counter>
 2be:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <pulse_time_counter+0x1>
 2c2:	87 3d       	cpi	r24, 0xD7	; 215
 2c4:	96 40       	sbci	r25, 0x06	; 6
 2c6:	08 f4       	brcc	.+2      	; 0x2ca <read_chunk+0x2c>
 2c8:	47 c0       	rjmp	.+142    	; 0x358 <read_chunk+0xba>
 2ca:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <pulse_time_counter>
 2ce:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <pulse_time_counter+0x1>
 2d2:	8e 3b       	cpi	r24, 0xBE	; 190
 2d4:	9a 40       	sbci	r25, 0x0A	; 10
 2d6:	08 f0       	brcs	.+2      	; 0x2da <read_chunk+0x3c>
 2d8:	3f c0       	rjmp	.+126    	; 0x358 <read_chunk+0xba>
		{			
			// pause 3.2 ms (800) - 6 ms (1500) 
			if (pause_time_counter > (3.2 * TIMER_COMPARE_VALUE_ONE_MS) && pause_time_counter < (6 * TIMER_COMPARE_VALUE_ONE_MS))
 2da:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__data_end>
 2de:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <__data_end+0x1>
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 ae 03 	call	0x75c	; 0x75c <__floatunsisf>
 2ea:	20 e0       	ldi	r18, 0x00	; 0
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	48 e4       	ldi	r20, 0x48	; 72
 2f0:	54 e4       	ldi	r21, 0x44	; 68
 2f2:	0e 94 0f 04 	call	0x81e	; 0x81e <__gesf2>
 2f6:	18 16       	cp	r1, r24
 2f8:	54 f4       	brge	.+20     	; 0x30e <read_chunk+0x70>
 2fa:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 2fe:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
 302:	8c 3d       	cpi	r24, 0xDC	; 220
 304:	95 40       	sbci	r25, 0x05	; 5
 306:	18 f4       	brcc	.+6      	; 0x30e <read_chunk+0x70>
			{
				// on start bit
				on_start_bit();
 308:	0e 94 9d 00 	call	0x13a	; 0x13a <on_start_bit>
 30c:	91 c0       	rjmp	.+290    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
			} 
			// pause 1.6 ms (400) - 3.2 ms (800)
			else if (pause_time_counter > (1.6 * TIMER_COMPARE_VALUE_ONE_MS) && pause_time_counter <= (3.2 * TIMER_COMPARE_VALUE_ONE_MS))
 30e:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__data_end>
 312:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <__data_end+0x1>
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 ae 03 	call	0x75c	; 0x75c <__floatunsisf>
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	48 ec       	ldi	r20, 0xC8	; 200
 324:	53 e4       	ldi	r21, 0x43	; 67
 326:	0e 94 0f 04 	call	0x81e	; 0x81e <__gesf2>
 32a:	18 16       	cp	r1, r24
 32c:	0c f0       	brlt	.+2      	; 0x330 <read_chunk+0x92>
 32e:	80 c0       	rjmp	.+256    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 330:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__data_end>
 334:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <__data_end+0x1>
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 ae 03 	call	0x75c	; 0x75c <__floatunsisf>
 340:	20 e0       	ldi	r18, 0x00	; 0
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	48 e4       	ldi	r20, 0x48	; 72
 346:	54 e4       	ldi	r21, 0x44	; 68
 348:	0e 94 a9 03 	call	0x752	; 0x752 <__cmpsf2>
 34c:	18 16       	cp	r1, r24
 34e:	0c f4       	brge	.+2      	; 0x352 <read_chunk+0xb4>
 350:	6f c0       	rjmp	.+222    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
			{
				// command repeat
				on_repeat_command();
 352:	0e 94 34 01 	call	0x268	; 0x268 <on_repeat_command>
 356:	6c c0       	rjmp	.+216    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
			}						
		}
		// pulse 360 microseconds (90) - 760 microseconds (190)		
		else if (pulse_time_counter > 0.36 * TIMER_COMPARE_VALUE_ONE_MS && pulse_time_counter < (0.76 * TIMER_COMPARE_VALUE_ONE_MS))
 358:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <pulse_time_counter>
 35c:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <pulse_time_counter+0x1>
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 ae 03 	call	0x75c	; 0x75c <__floatunsisf>
 368:	20 e0       	ldi	r18, 0x00	; 0
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	44 eb       	ldi	r20, 0xB4	; 180
 36e:	52 e4       	ldi	r21, 0x42	; 66
 370:	0e 94 0f 04 	call	0x81e	; 0x81e <__gesf2>
 374:	18 16       	cp	r1, r24
 376:	0c f0       	brlt	.+2      	; 0x37a <read_chunk+0xdc>
 378:	59 c0       	rjmp	.+178    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 37a:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <pulse_time_counter>
 37e:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <pulse_time_counter+0x1>
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 ae 03 	call	0x75c	; 0x75c <__floatunsisf>
 38a:	20 e0       	ldi	r18, 0x00	; 0
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	4e e3       	ldi	r20, 0x3E	; 62
 390:	53 e4       	ldi	r21, 0x43	; 67
 392:	0e 94 a9 03 	call	0x752	; 0x752 <__cmpsf2>
 396:	88 23       	and	r24, r24
 398:	0c f0       	brlt	.+2      	; 0x39c <read_chunk+0xfe>
 39a:	48 c0       	rjmp	.+144    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		{
			// pause 1.5 ms (375) - 1.9 ms (475)
			if (pause_time_counter > (1.5 * TIMER_COMPARE_VALUE_ONE_MS) && pause_time_counter < (1.9 * TIMER_COMPARE_VALUE_ONE_MS)) 
 39c:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__data_end>
 3a0:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <__data_end+0x1>
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 ae 03 	call	0x75c	; 0x75c <__floatunsisf>
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	30 e8       	ldi	r19, 0x80	; 128
 3b0:	4b eb       	ldi	r20, 0xBB	; 187
 3b2:	53 e4       	ldi	r21, 0x43	; 67
 3b4:	0e 94 0f 04 	call	0x81e	; 0x81e <__gesf2>
 3b8:	18 16       	cp	r1, r24
 3ba:	a4 f4       	brge	.+40     	; 0x3e4 <read_chunk+0x146>
 3bc:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__data_end>
 3c0:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <__data_end+0x1>
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 ae 03 	call	0x75c	; 0x75c <__floatunsisf>
 3cc:	20 e0       	ldi	r18, 0x00	; 0
 3ce:	30 e8       	ldi	r19, 0x80	; 128
 3d0:	4d ee       	ldi	r20, 0xED	; 237
 3d2:	53 e4       	ldi	r21, 0x43	; 67
 3d4:	0e 94 a9 03 	call	0x752	; 0x752 <__cmpsf2>
 3d8:	88 23       	and	r24, r24
 3da:	24 f4       	brge	.+8      	; 0x3e4 <read_chunk+0x146>
			{
				// data bit = 1
				on_data_bit(1);
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	0e 94 af 00 	call	0x15e	; 0x15e <on_data_bit>
 3e2:	26 c0       	rjmp	.+76     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
			} 
			// pause 360 microseconds (90) - 760 microseconds (190)
			else if (pause_time_counter > (0.36 * TIMER_COMPARE_VALUE_ONE_MS) && pause_time_counter < (0.76 * TIMER_COMPARE_VALUE_ONE_MS)) 
 3e4:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__data_end>
 3e8:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <__data_end+0x1>
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 ae 03 	call	0x75c	; 0x75c <__floatunsisf>
 3f4:	20 e0       	ldi	r18, 0x00	; 0
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	44 eb       	ldi	r20, 0xB4	; 180
 3fa:	52 e4       	ldi	r21, 0x42	; 66
 3fc:	0e 94 0f 04 	call	0x81e	; 0x81e <__gesf2>
 400:	18 16       	cp	r1, r24
 402:	b4 f4       	brge	.+44     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 404:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__data_end>
 408:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <__data_end+0x1>
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 ae 03 	call	0x75c	; 0x75c <__floatunsisf>
 414:	20 e0       	ldi	r18, 0x00	; 0
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	4e e3       	ldi	r20, 0x3E	; 62
 41a:	53 e4       	ldi	r21, 0x43	; 67
 41c:	0e 94 a9 03 	call	0x752	; 0x752 <__cmpsf2>
 420:	88 23       	and	r24, r24
 422:	34 f4       	brge	.+12     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
			{
				// data bit = 0
				on_data_bit(0);
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	0e 94 af 00 	call	0x15e	; 0x15e <on_data_bit>
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
			}
		} 
		else
		{
			// something wrong with packet : reset receiver
			reset_ir_receiver();
 42c:	0e 94 8c 00 	call	0x118	; 0x118 <reset_ir_receiver>
		}
	}
	
	// zero time counters for the next signals
	pulse_time_counter = 0;
 430:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <pulse_time_counter+0x1>
 434:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <pulse_time_counter>
	pause_time_counter = 0;
 438:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <__data_end+0x1>
 43c:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__data_end>
 440:	08 95       	ret

00000442 <check_new_packet>:
// 0 - no, otherwise yes
// received_packet is a pointer to the IR_Packet structure to receive the data
// the packet updated only if the function result is not 0
extern uint8_t check_new_packet(struct IR_Packet * received_packet)
{
	if (receiver_state == RECEIVER_STATE_READY)
 442:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <receiver_state>
 446:	22 30       	cpi	r18, 0x02	; 2
 448:	e1 f4       	brne	.+56     	; 0x482 <check_new_packet+0x40>
	{	
		if (rec_ext_addr > 0) 
 44a:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <rec_ext_addr>
 44e:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <rec_ext_addr+0x1>
 452:	21 15       	cp	r18, r1
 454:	31 05       	cpc	r19, r1
 456:	21 f0       	breq	.+8      	; 0x460 <check_new_packet+0x1e>
		{
			// extended NEC protocol, get 2 bytes address
			received_packet->addr = rec_ext_addr;
 458:	fc 01       	movw	r30, r24
 45a:	31 83       	std	Z+1, r19	; 0x01
 45c:	20 83       	st	Z, r18
 45e:	06 c0       	rjmp	.+12     	; 0x46c <check_new_packet+0x2a>
		}
		else
		{
			// standard NEC protocol
			received_packet->addr = rec_addr;
 460:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <rec_addr>
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	fc 01       	movw	r30, r24
 468:	31 83       	std	Z+1, r19	; 0x01
 46a:	20 83       	st	Z, r18
		}
		received_packet->command = rec_command;
 46c:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <rec_command>
 470:	fc 01       	movw	r30, r24
 472:	22 83       	std	Z+2, r18	; 0x02
		received_packet->repeat = rec_repeat;
 474:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <rec_repeat>
 478:	23 83       	std	Z+3, r18	; 0x03
		
		// the packet is read successfully
		receiver_state = RECEIVER_STATE_START_REPEAT;
 47a:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <receiver_state>
		
		return 1; // return positive status, because we have event (data)
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	08 95       	ret
	}
	return 0;
 482:	80 e0       	ldi	r24, 0x00	; 0
}
 484:	08 95       	ret

00000486 <__vector_1>:

// external interrupt, catches rising and falling edges pulses to read the data according to the NEC protocol
ISR(INT0_vect)
{
 486:	1f 92       	push	r1
 488:	0f 92       	push	r0
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	0f 92       	push	r0
 48e:	11 24       	eor	r1, r1
 490:	2f 93       	push	r18
 492:	3f 93       	push	r19
 494:	4f 93       	push	r20
 496:	5f 93       	push	r21
 498:	6f 93       	push	r22
 49a:	7f 93       	push	r23
 49c:	8f 93       	push	r24
 49e:	9f 93       	push	r25
 4a0:	af 93       	push	r26
 4a2:	bf 93       	push	r27
 4a4:	ef 93       	push	r30
 4a6:	ff 93       	push	r31
	// skip next packets if the current packet not read by client application yet
	if (receiver_state == RECEIVER_STATE_READY)
 4a8:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <receiver_state>
 4ac:	82 30       	cpi	r24, 0x02	; 2
 4ae:	b1 f1       	breq	.+108    	; 0x51c <__vector_1+0x96>
		return;
	}
	// read current signal edge
	uint8_t rising_edge = (IRR_PIN_PORT & (1<<IRR_PIN));
	
	if (!rising_edge) 
 4b0:	4a 99       	sbic	0x09, 2	; 9
 4b2:	24 c0       	rjmp	.+72     	; 0x4fc <__vector_1+0x76>
	{				
		// STEP: 1	
		// ON falling edge interrupt
		if (pulse_time_counter == 0)
 4b4:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <pulse_time_counter>
 4b8:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <pulse_time_counter+0x1>
 4bc:	23 2b       	or	r18, r19
 4be:	51 f4       	brne	.+20     	; 0x4d4 <__vector_1+0x4e>
		{	
			// new data signal start receiving			
			if (receiver_state == RECEIVER_STATE_READING)
 4c0:	81 30       	cpi	r24, 0x01	; 1
 4c2:	21 f4       	brne	.+8      	; 0x4cc <__vector_1+0x46>
			{
				// we are receving data packet bit by bit, set max delay for that
				start_ir_timer(MAX_BIT_TRANSMISSION_DELAY);	
 4c4:	80 e1       	ldi	r24, 0x10	; 16
 4c6:	0e 94 64 00 	call	0xc8	; 0xc8 <start_ir_timer>
 4ca:	28 c0       	rjmp	.+80     	; 0x51c <__vector_1+0x96>
			} 
			else
			{
				// we are receiving new packet or repeat command
				start_ir_timer(MAX_INITIAL_PULSE_TRANSMISSION_DELAY);
 4cc:	80 e1       	ldi	r24, 0x10	; 16
 4ce:	0e 94 64 00 	call	0xc8	; 0xc8 <start_ir_timer>
 4d2:	24 c0       	rjmp	.+72     	; 0x51c <__vector_1+0x96>
		} 
		else 
		{		
			// STEP: 3
			// save duration of the pause
			pause_time_counter = TCNT1 - pulse_time_counter;
 4d4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 4d8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4dc:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <pulse_time_counter>
 4e0:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <pulse_time_counter+0x1>
 4e4:	82 1b       	sub	r24, r18
 4e6:	93 0b       	sbc	r25, r19
 4e8:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__data_end+0x1>
 4ec:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
			// start 			
			start_ir_timer(MAX_BIT_TRANSMISSION_DELAY);	
 4f0:	80 e1       	ldi	r24, 0x10	; 16
 4f2:	0e 94 64 00 	call	0xc8	; 0xc8 <start_ir_timer>
			// read the piece of data received
			read_chunk();
 4f6:	0e 94 4f 01 	call	0x29e	; 0x29e <read_chunk>
 4fa:	10 c0       	rjmp	.+32     	; 0x51c <__vector_1+0x96>
	} 
	else 
	{			
		// STEP : 2			
		// ON rising edge interrupt, read the counter value -> duration of pulse
		pulse_time_counter = TCNT1;
 4fc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 500:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 504:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <pulse_time_counter+0x1>
 508:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <pulse_time_counter>
		if (pulse_time_counter == 0) {
 50c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <pulse_time_counter>
 510:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <pulse_time_counter+0x1>
 514:	89 2b       	or	r24, r25
 516:	11 f4       	brne	.+4      	; 0x51c <__vector_1+0x96>
			// something goes wrong
			reset_ir_receiver();
 518:	0e 94 8c 00 	call	0x118	; 0x118 <reset_ir_receiver>
		}
	}
}
 51c:	ff 91       	pop	r31
 51e:	ef 91       	pop	r30
 520:	bf 91       	pop	r27
 522:	af 91       	pop	r26
 524:	9f 91       	pop	r25
 526:	8f 91       	pop	r24
 528:	7f 91       	pop	r23
 52a:	6f 91       	pop	r22
 52c:	5f 91       	pop	r21
 52e:	4f 91       	pop	r20
 530:	3f 91       	pop	r19
 532:	2f 91       	pop	r18
 534:	0f 90       	pop	r0
 536:	0f be       	out	0x3f, r0	; 63
 538:	0f 90       	pop	r0
 53a:	1f 90       	pop	r1
 53c:	18 95       	reti

0000053e <__vector_11>:

// When time is out
ISR(TIMER1_COMPA_vect)
{
 53e:	1f 92       	push	r1
 540:	0f 92       	push	r0
 542:	0f b6       	in	r0, 0x3f	; 63
 544:	0f 92       	push	r0
 546:	11 24       	eor	r1, r1
 548:	2f 93       	push	r18
 54a:	3f 93       	push	r19
 54c:	4f 93       	push	r20
 54e:	5f 93       	push	r21
 550:	6f 93       	push	r22
 552:	7f 93       	push	r23
 554:	8f 93       	push	r24
 556:	9f 93       	push	r25
 558:	af 93       	push	r26
 55a:	bf 93       	push	r27
 55c:	ef 93       	push	r30
 55e:	ff 93       	push	r31
	stop_ir_timer(); // we set timer only for one time
 560:	0e 94 80 00 	call	0x100	; 0x100 <stop_ir_timer>
	
	if (receiver_state == RECEIVER_STATE_READY)
 564:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <receiver_state>
 568:	82 30       	cpi	r24, 0x02	; 2
 56a:	19 f4       	brne	.+6      	; 0x572 <__vector_11+0x34>
	{
		// timeout for the next repeat command, do not allow any new repeat command more
		receiver_allow_repeat = REPEAT_COMMAND_NOT_ALLOWED;
 56c:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <receiver_allow_repeat>
 570:	02 c0       	rjmp	.+4      	; 0x576 <__vector_11+0x38>
	}
	else
	{
		// something wrong with signals
		// reset IR receiver on the timer interrupt
		reset_ir_receiver();
 572:	0e 94 8c 00 	call	0x118	; 0x118 <reset_ir_receiver>
	}	
}
 576:	ff 91       	pop	r31
 578:	ef 91       	pop	r30
 57a:	bf 91       	pop	r27
 57c:	af 91       	pop	r26
 57e:	9f 91       	pop	r25
 580:	8f 91       	pop	r24
 582:	7f 91       	pop	r23
 584:	6f 91       	pop	r22
 586:	5f 91       	pop	r21
 588:	4f 91       	pop	r20
 58a:	3f 91       	pop	r19
 58c:	2f 91       	pop	r18
 58e:	0f 90       	pop	r0
 590:	0f be       	out	0x3f, r0	; 63
 592:	0f 90       	pop	r0
 594:	1f 90       	pop	r1
 596:	18 95       	reti

00000598 <init_receiver>:

// init receiver
extern void init_receiver()
{
 598:	cf 93       	push	r28
	char cSREG;
	cSREG = SREG; /* store SREG value */
 59a:	cf b7       	in	r28, 0x3f	; 63
	/* disable interrupts during timed sequence */
	cli();
 59c:	f8 94       	cli
	#ifdef IR_STATUS_LED
	IR_STATUS_LED_DDR|=(1<<IR_STATUS_LED_PIN);
	#endif
	
	// IR port init
	init_IRR_PIN();
 59e:	8a b1       	in	r24, 0x0a	; 10
 5a0:	8b 7f       	andi	r24, 0xFB	; 251
 5a2:	8a b9       	out	0x0a, r24	; 10
 5a4:	8b b1       	in	r24, 0x0b	; 11
 5a6:	84 60       	ori	r24, 0x04	; 4
 5a8:	8b b9       	out	0x0b, r24	; 11
 5aa:	e9 e6       	ldi	r30, 0x69	; 105
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	80 81       	ld	r24, Z
 5b0:	81 60       	ori	r24, 0x01	; 1
 5b2:	80 83       	st	Z, r24
 5b4:	8d b3       	in	r24, 0x1d	; 29
 5b6:	81 60       	ori	r24, 0x01	; 1
 5b8:	8d bb       	out	0x1d, r24	; 29
	//	
	reset_ir_receiver();
 5ba:	0e 94 8c 00 	call	0x118	; 0x118 <reset_ir_receiver>
	
	SREG = cSREG; /* restore SREG value (I-bit) */
 5be:	cf bf       	out	0x3f, r28	; 63
}
 5c0:	cf 91       	pop	r28
 5c2:	08 95       	ret

000005c4 <usart_init>:
void removeGarbage(){
	unsigned char x = usart_receives();
	while(x != 0x0A){
		x = usart_receives();
	}
}
 5c4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 5c8:	87 e6       	ldi	r24, 0x67	; 103
 5ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 5ce:	e2 ec       	ldi	r30, 0xC2	; 194
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	80 81       	ld	r24, Z
 5d4:	86 60       	ori	r24, 0x06	; 6
 5d6:	80 83       	st	Z, r24
 5d8:	e1 ec       	ldi	r30, 0xC1	; 193
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	80 81       	ld	r24, Z
 5de:	88 61       	ori	r24, 0x18	; 24
 5e0:	80 83       	st	Z, r24
 5e2:	08 95       	ret

000005e4 <usart_transmit>:
 5e4:	dc 01       	movw	r26, r24
 5e6:	20 e0       	ldi	r18, 0x00	; 0
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	0c c0       	rjmp	.+24     	; 0x604 <usart_transmit+0x20>
 5ec:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 5f0:	95 ff       	sbrs	r25, 5
 5f2:	fc cf       	rjmp	.-8      	; 0x5ec <usart_transmit+0x8>
 5f4:	fd 01       	movw	r30, r26
 5f6:	e4 0f       	add	r30, r20
 5f8:	f5 1f       	adc	r31, r21
 5fa:	80 81       	ld	r24, Z
 5fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 600:	2f 5f       	subi	r18, 0xFF	; 255
 602:	3f 4f       	sbci	r19, 0xFF	; 255
 604:	fd 01       	movw	r30, r26
 606:	01 90       	ld	r0, Z+
 608:	00 20       	and	r0, r0
 60a:	e9 f7       	brne	.-6      	; 0x606 <usart_transmit+0x22>
 60c:	31 97       	sbiw	r30, 0x01	; 1
 60e:	ea 1b       	sub	r30, r26
 610:	fb 0b       	sbc	r31, r27
 612:	31 97       	sbiw	r30, 0x01	; 1
 614:	a9 01       	movw	r20, r18
 616:	e2 17       	cp	r30, r18
 618:	f3 07       	cpc	r31, r19
 61a:	40 f7       	brcc	.-48     	; 0x5ec <usart_transmit+0x8>
 61c:	08 95       	ret

0000061e <servo_init>:

void servo_init(){
	/* 1. Set Fast PWM mode 14: set WGM11, WGM12, WGM13 to 1 */
	/* 3. Set pre-scalar of 8 */
	/* 4. Set Fast PWM non-inverting mode */
	TCCR1A |= (1 << WGM11) | (1 << COM1A1);
 61e:	e0 e8       	ldi	r30, 0x80	; 128
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	80 81       	ld	r24, Z
 624:	82 68       	ori	r24, 0x82	; 130
 626:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13) | (1 << CS11);
 628:	e1 e8       	ldi	r30, 0x81	; 129
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	80 81       	ld	r24, Z
 62e:	8a 61       	ori	r24, 0x1A	; 26
 630:	80 83       	st	Z, r24

	/* 2. Set ICR1 register: PWM period */
	ICR1 = 39999;
 632:	8f e3       	ldi	r24, 0x3F	; 63
 634:	9c e9       	ldi	r25, 0x9C	; 156
 636:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 63a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 63e:	08 95       	ret

00000640 <ir_actions>:
		x = usart_receives();
	}
}

void ir_actions(int commandCode){
	switch (commandCode)
 640:	85 34       	cpi	r24, 0x45	; 69
 642:	91 05       	cpc	r25, r1
 644:	79 f0       	breq	.+30     	; 0x664 <ir_actions+0x24>
 646:	3c f4       	brge	.+14     	; 0x656 <ir_actions+0x16>
 648:	80 34       	cpi	r24, 0x40	; 64
 64a:	91 05       	cpc	r25, r1
 64c:	d1 f0       	breq	.+52     	; 0x682 <ir_actions+0x42>
 64e:	83 34       	cpi	r24, 0x43	; 67
 650:	91 05       	cpc	r25, r1
 652:	69 f1       	breq	.+90     	; 0x6ae <ir_actions+0x6e>
 654:	08 95       	ret
 656:	86 34       	cpi	r24, 0x46	; 70
 658:	91 05       	cpc	r25, r1
 65a:	49 f0       	breq	.+18     	; 0x66e <ir_actions+0x2e>
 65c:	87 34       	cpi	r24, 0x47	; 71
 65e:	91 05       	cpc	r25, r1
 660:	59 f0       	breq	.+22     	; 0x678 <ir_actions+0x38>
 662:	08 95       	ret
		{
			case 0x45:
			usart_transmit("POWER ON");
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	91 e0       	ldi	r25, 0x01	; 1
 668:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <usart_transmit>
			break;
 66c:	08 95       	ret
			case 0x46:
			usart_transmit("SWITCH MODE");
 66e:	89 e0       	ldi	r24, 0x09	; 9
 670:	91 e0       	ldi	r25, 0x01	; 1
 672:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <usart_transmit>
			break;
 676:	08 95       	ret
			case 0x47:
			usart_transmit("SHOOT");
 678:	85 e1       	ldi	r24, 0x15	; 21
 67a:	91 e0       	ldi	r25, 0x01	; 1
 67c:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <usart_transmit>
			break;
 680:	08 95       	ret
			case 0x40:
			servo_init();
 682:	0e 94 0f 03 	call	0x61e	; 0x61e <servo_init>
			OCR1A = 1999 - 800;
 686:	8f ea       	ldi	r24, 0xAF	; 175
 688:	94 e0       	ldi	r25, 0x04	; 4
 68a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 68e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			usart_transmit("LEFT");
 692:	8b e1       	ldi	r24, 0x1B	; 27
 694:	91 e0       	ldi	r25, 0x01	; 1
 696:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <usart_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 69a:	2f ef       	ldi	r18, 0xFF	; 255
 69c:	83 ed       	ldi	r24, 0xD3	; 211
 69e:	90 e3       	ldi	r25, 0x30	; 48
 6a0:	21 50       	subi	r18, 0x01	; 1
 6a2:	80 40       	sbci	r24, 0x00	; 0
 6a4:	90 40       	sbci	r25, 0x00	; 0
 6a6:	e1 f7       	brne	.-8      	; 0x6a0 <ir_actions+0x60>
 6a8:	00 c0       	rjmp	.+0      	; 0x6aa <ir_actions+0x6a>
 6aa:	00 00       	nop
 6ac:	08 95       	ret
			_delay_ms(1000);
			break;
			case 0x43:
			servo_init();
 6ae:	0e 94 0f 03 	call	0x61e	; 0x61e <servo_init>
			usart_transmit("RIGHT");
 6b2:	80 e2       	ldi	r24, 0x20	; 32
 6b4:	91 e0       	ldi	r25, 0x01	; 1
 6b6:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <usart_transmit>
			OCR1A = 3999 + 800;
 6ba:	8f eb       	ldi	r24, 0xBF	; 191
 6bc:	92 e1       	ldi	r25, 0x12	; 18
 6be:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 6c2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 6c6:	2f ef       	ldi	r18, 0xFF	; 255
 6c8:	83 ed       	ldi	r24, 0xD3	; 211
 6ca:	90 e3       	ldi	r25, 0x30	; 48
 6cc:	21 50       	subi	r18, 0x01	; 1
 6ce:	80 40       	sbci	r24, 0x00	; 0
 6d0:	90 40       	sbci	r25, 0x00	; 0
 6d2:	e1 f7       	brne	.-8      	; 0x6cc <ir_actions+0x8c>
 6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <ir_actions+0x96>
 6d6:	00 00       	nop
 6d8:	08 95       	ret

000006da <main>:
void removeGarbage();
void ir_actions(int commandCode);
void servo_init();

int main(void)
{
 6da:	cf 93       	push	r28
 6dc:	df 93       	push	r29
 6de:	cd b7       	in	r28, 0x3d	; 61
 6e0:	de b7       	in	r29, 0x3e	; 62
 6e2:	2e 97       	sbiw	r28, 0x0e	; 14
 6e4:	0f b6       	in	r0, 0x3f	; 63
 6e6:	f8 94       	cli
 6e8:	de bf       	out	0x3e, r29	; 62
 6ea:	0f be       	out	0x3f, r0	; 63
 6ec:	cd bf       	out	0x3d, r28	; 61
	int currentCommand;
	
	//servo initialization
	DDRB |= 1 << PINB1; // Set pin 9 on arduino to output
 6ee:	84 b1       	in	r24, 0x04	; 4
 6f0:	82 60       	ori	r24, 0x02	; 2
 6f2:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0 << PIND4;
 6f4:	8a b1       	in	r24, 0x0a	; 10
 6f6:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 1 << PIND4;
 6f8:	8b b1       	in	r24, 0x0b	; 11
 6fa:	80 61       	ori	r24, 0x10	; 16
 6fc:	8b b9       	out	0x0b, r24	; 11
	
	//usart, receiver initialization
	usart_init();
 6fe:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <usart_init>
	sei();
 702:	78 94       	sei
	init_receiver();
 704:	0e 94 cc 02 	call	0x598	; 0x598 <init_receiver>

	
	usart_transmit("START\n");
 708:	86 e2       	ldi	r24, 0x26	; 38
 70a:	91 e0       	ldi	r25, 0x01	; 1
 70c:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <usart_transmit>
	while (1) {
		struct IR_Packet received_packet;
		cli();
 710:	f8 94       	cli
		uint8_t check_result = check_new_packet(&received_packet);	
 712:	ce 01       	movw	r24, r28
 714:	0b 96       	adiw	r24, 0x0b	; 11
 716:	0e 94 21 02 	call	0x442	; 0x442 <check_new_packet>
		sei();
 71a:	78 94       	sei

		if (check_result)
 71c:	88 23       	and	r24, r24
 71e:	c1 f3       	breq	.-16     	; 0x710 <main+0x36>
		{
			char buff[10];
			if (received_packet.repeat > 0)
 720:	8e 85       	ldd	r24, Y+14	; 0x0e
 722:	88 23       	and	r24, r24
 724:	21 f0       	breq	.+8      	; 0x72e <main+0x54>
			{
				//utoa(received_packet.repeat, buff, 10);
				//usart_transmit(" Repeat: "); // Command repeat counter
				//usart_transmit(buff);
				ir_actions(currentCommand);
 726:	c8 01       	movw	r24, r16
 728:	0e 94 20 03 	call	0x640	; 0x640 <ir_actions>
 72c:	f1 cf       	rjmp	.-30     	; 0x710 <main+0x36>
			} else
			{
				usart_transmit("\n\r");
 72e:	8d e2       	ldi	r24, 0x2D	; 45
 730:	91 e0       	ldi	r25, 0x01	; 1
 732:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <usart_transmit>
				utoa(received_packet.command, buff, 16);
 736:	8d 85       	ldd	r24, Y+13	; 0x0d
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 738:	40 e1       	ldi	r20, 0x10	; 16
 73a:	be 01       	movw	r22, r28
 73c:	6f 5f       	subi	r22, 0xFF	; 255
 73e:	7f 4f       	sbci	r23, 0xFF	; 255
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	0e 94 14 04 	call	0x828	; 0x828 <__utoa_ncheck>
				currentCommand = received_packet.command;
 746:	0d 85       	ldd	r16, Y+13	; 0x0d
 748:	10 e0       	ldi	r17, 0x00	; 0
				ir_actions(currentCommand);
 74a:	c8 01       	movw	r24, r16
 74c:	0e 94 20 03 	call	0x640	; 0x640 <ir_actions>
			}
		}
	}
 750:	df cf       	rjmp	.-66     	; 0x710 <main+0x36>

00000752 <__cmpsf2>:
 752:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__fp_cmp>
 756:	08 f4       	brcc	.+2      	; 0x75a <__cmpsf2+0x8>
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	08 95       	ret

0000075c <__floatunsisf>:
 75c:	e8 94       	clt
 75e:	09 c0       	rjmp	.+18     	; 0x772 <__floatsisf+0x12>

00000760 <__floatsisf>:
 760:	97 fb       	bst	r25, 7
 762:	3e f4       	brtc	.+14     	; 0x772 <__floatsisf+0x12>
 764:	90 95       	com	r25
 766:	80 95       	com	r24
 768:	70 95       	com	r23
 76a:	61 95       	neg	r22
 76c:	7f 4f       	sbci	r23, 0xFF	; 255
 76e:	8f 4f       	sbci	r24, 0xFF	; 255
 770:	9f 4f       	sbci	r25, 0xFF	; 255
 772:	99 23       	and	r25, r25
 774:	a9 f0       	breq	.+42     	; 0x7a0 <__floatsisf+0x40>
 776:	f9 2f       	mov	r31, r25
 778:	96 e9       	ldi	r25, 0x96	; 150
 77a:	bb 27       	eor	r27, r27
 77c:	93 95       	inc	r25
 77e:	f6 95       	lsr	r31
 780:	87 95       	ror	r24
 782:	77 95       	ror	r23
 784:	67 95       	ror	r22
 786:	b7 95       	ror	r27
 788:	f1 11       	cpse	r31, r1
 78a:	f8 cf       	rjmp	.-16     	; 0x77c <__floatsisf+0x1c>
 78c:	fa f4       	brpl	.+62     	; 0x7cc <__floatsisf+0x6c>
 78e:	bb 0f       	add	r27, r27
 790:	11 f4       	brne	.+4      	; 0x796 <__floatsisf+0x36>
 792:	60 ff       	sbrs	r22, 0
 794:	1b c0       	rjmp	.+54     	; 0x7cc <__floatsisf+0x6c>
 796:	6f 5f       	subi	r22, 0xFF	; 255
 798:	7f 4f       	sbci	r23, 0xFF	; 255
 79a:	8f 4f       	sbci	r24, 0xFF	; 255
 79c:	9f 4f       	sbci	r25, 0xFF	; 255
 79e:	16 c0       	rjmp	.+44     	; 0x7cc <__floatsisf+0x6c>
 7a0:	88 23       	and	r24, r24
 7a2:	11 f0       	breq	.+4      	; 0x7a8 <__floatsisf+0x48>
 7a4:	96 e9       	ldi	r25, 0x96	; 150
 7a6:	11 c0       	rjmp	.+34     	; 0x7ca <__floatsisf+0x6a>
 7a8:	77 23       	and	r23, r23
 7aa:	21 f0       	breq	.+8      	; 0x7b4 <__floatsisf+0x54>
 7ac:	9e e8       	ldi	r25, 0x8E	; 142
 7ae:	87 2f       	mov	r24, r23
 7b0:	76 2f       	mov	r23, r22
 7b2:	05 c0       	rjmp	.+10     	; 0x7be <__floatsisf+0x5e>
 7b4:	66 23       	and	r22, r22
 7b6:	71 f0       	breq	.+28     	; 0x7d4 <__floatsisf+0x74>
 7b8:	96 e8       	ldi	r25, 0x86	; 134
 7ba:	86 2f       	mov	r24, r22
 7bc:	70 e0       	ldi	r23, 0x00	; 0
 7be:	60 e0       	ldi	r22, 0x00	; 0
 7c0:	2a f0       	brmi	.+10     	; 0x7cc <__floatsisf+0x6c>
 7c2:	9a 95       	dec	r25
 7c4:	66 0f       	add	r22, r22
 7c6:	77 1f       	adc	r23, r23
 7c8:	88 1f       	adc	r24, r24
 7ca:	da f7       	brpl	.-10     	; 0x7c2 <__floatsisf+0x62>
 7cc:	88 0f       	add	r24, r24
 7ce:	96 95       	lsr	r25
 7d0:	87 95       	ror	r24
 7d2:	97 f9       	bld	r25, 7
 7d4:	08 95       	ret

000007d6 <__fp_cmp>:
 7d6:	99 0f       	add	r25, r25
 7d8:	00 08       	sbc	r0, r0
 7da:	55 0f       	add	r21, r21
 7dc:	aa 0b       	sbc	r26, r26
 7de:	e0 e8       	ldi	r30, 0x80	; 128
 7e0:	fe ef       	ldi	r31, 0xFE	; 254
 7e2:	16 16       	cp	r1, r22
 7e4:	17 06       	cpc	r1, r23
 7e6:	e8 07       	cpc	r30, r24
 7e8:	f9 07       	cpc	r31, r25
 7ea:	c0 f0       	brcs	.+48     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 7ec:	12 16       	cp	r1, r18
 7ee:	13 06       	cpc	r1, r19
 7f0:	e4 07       	cpc	r30, r20
 7f2:	f5 07       	cpc	r31, r21
 7f4:	98 f0       	brcs	.+38     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 7f6:	62 1b       	sub	r22, r18
 7f8:	73 0b       	sbc	r23, r19
 7fa:	84 0b       	sbc	r24, r20
 7fc:	95 0b       	sbc	r25, r21
 7fe:	39 f4       	brne	.+14     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 800:	0a 26       	eor	r0, r26
 802:	61 f0       	breq	.+24     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 804:	23 2b       	or	r18, r19
 806:	24 2b       	or	r18, r20
 808:	25 2b       	or	r18, r21
 80a:	21 f4       	brne	.+8      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 80c:	08 95       	ret
 80e:	0a 26       	eor	r0, r26
 810:	09 f4       	brne	.+2      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 812:	a1 40       	sbci	r26, 0x01	; 1
 814:	a6 95       	lsr	r26
 816:	8f ef       	ldi	r24, 0xFF	; 255
 818:	81 1d       	adc	r24, r1
 81a:	81 1d       	adc	r24, r1
 81c:	08 95       	ret

0000081e <__gesf2>:
 81e:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__fp_cmp>
 822:	08 f4       	brcc	.+2      	; 0x826 <__gesf2+0x8>
 824:	8f ef       	ldi	r24, 0xFF	; 255
 826:	08 95       	ret

00000828 <__utoa_ncheck>:
 828:	bb 27       	eor	r27, r27

0000082a <__utoa_common>:
 82a:	fb 01       	movw	r30, r22
 82c:	55 27       	eor	r21, r21
 82e:	aa 27       	eor	r26, r26
 830:	88 0f       	add	r24, r24
 832:	99 1f       	adc	r25, r25
 834:	aa 1f       	adc	r26, r26
 836:	a4 17       	cp	r26, r20
 838:	10 f0       	brcs	.+4      	; 0x83e <__utoa_common+0x14>
 83a:	a4 1b       	sub	r26, r20
 83c:	83 95       	inc	r24
 83e:	50 51       	subi	r21, 0x10	; 16
 840:	b9 f7       	brne	.-18     	; 0x830 <__utoa_common+0x6>
 842:	a0 5d       	subi	r26, 0xD0	; 208
 844:	aa 33       	cpi	r26, 0x3A	; 58
 846:	08 f0       	brcs	.+2      	; 0x84a <__utoa_common+0x20>
 848:	a9 5d       	subi	r26, 0xD9	; 217
 84a:	a1 93       	st	Z+, r26
 84c:	00 97       	sbiw	r24, 0x00	; 0
 84e:	79 f7       	brne	.-34     	; 0x82e <__utoa_common+0x4>
 850:	b1 11       	cpse	r27, r1
 852:	b1 93       	st	Z+, r27
 854:	11 92       	st	Z+, r1
 856:	cb 01       	movw	r24, r22
 858:	0c 94 2e 04 	jmp	0x85c	; 0x85c <strrev>

0000085c <strrev>:
 85c:	dc 01       	movw	r26, r24
 85e:	fc 01       	movw	r30, r24
 860:	67 2f       	mov	r22, r23
 862:	71 91       	ld	r23, Z+
 864:	77 23       	and	r23, r23
 866:	e1 f7       	brne	.-8      	; 0x860 <strrev+0x4>
 868:	32 97       	sbiw	r30, 0x02	; 2
 86a:	04 c0       	rjmp	.+8      	; 0x874 <strrev+0x18>
 86c:	7c 91       	ld	r23, X
 86e:	6d 93       	st	X+, r22
 870:	70 83       	st	Z, r23
 872:	62 91       	ld	r22, -Z
 874:	ae 17       	cp	r26, r30
 876:	bf 07       	cpc	r27, r31
 878:	c8 f3       	brcs	.-14     	; 0x86c <strrev+0x10>
 87a:	08 95       	ret

0000087c <_exit>:
 87c:	f8 94       	cli

0000087e <__stop_program>:
 87e:	ff cf       	rjmp	.-2      	; 0x87e <__stop_program>
